query = list(
PlayerID = player_id,
PlayerPosition = "",
Season = season,
ContextMeasure = "FGA",
DateFrom = "",
DateTo = "",
GameID = "",
GameSegment = "",
LastNGames = 0,
LeagueID = "00",
Location = "",
Month = 0,
OpponentTeamID = 0,
Outcome = "",
Period = 0,
Position = "",
RookieYear = "",
SeasonSegment = "",
SeasonType = "Regular Season",
TeamID = 0,
VsConference = "",
VsDivision = ""
),
add_headers(request_headers)
)
stop_for_status(request)
data = content(request)
raw_shots_data = data$resultSets[[1]]$rowSet
col_names = tolower(as.character(data$resultSets[[1]]$headers))
if (length(raw_shots_data) == 0) {
shots = data.frame(
matrix(nrow = 0, ncol = length(col_names))
)
} else {
shots = data.frame(
matrix(
unlist(raw_shots_data),
ncol = length(col_names),
byrow = TRUE
)
)
}
shots = tbl_df(shots)
names(shots) = col_names
shots = mutate(shots,
loc_x = as.numeric(as.character(loc_x)) / 10,
loc_y = as.numeric(as.character(loc_y)) / 10 + hoop_center_y,
shot_distance = as.numeric(as.character(shot_distance)),
shot_made_numeric = as.numeric(as.character(shot_made_flag)),
shot_made_flag = factor(shot_made_flag, levels = c("1", "0"), labels = c("made", "missed")),
shot_attempted_flag = as.numeric(as.character(shot_attempted_flag)),
shot_value = ifelse(tolower(shot_type) == "3pt field goal", 3, 2)
)
raw_league_avg_data = data$resultSets[[2]]$rowSet
league_avg_names = tolower(as.character(data$resultSets[[2]]$headers))
league_averages = tbl_df(data.frame(
matrix(unlist(raw_league_avg_data), ncol = length(league_avg_names), byrow = TRUE)
))
names(league_averages) = league_avg_names
league_averages = mutate(league_averages,
fga = as.numeric(as.character(fga)),
fgm = as.numeric(as.character(fgm)),
fg_pct = as.numeric(as.character(fg_pct)),
shot_value = ifelse(shot_zone_basic %in% c("Above the Break 3", "Backcourt", "Left Corner 3", "Right Corner 3"), 3, 2)
)
return(list(player = shots, league_averages = league_averages))
}
default_shots = fetch_shots_by_player_id_and_season(default_player$person_id, default_season)
View(default_shots)
summary(default_shots$player$minutes_remaining)
fetch_shots_by_player_id_and_season = function(player_id, season) {
req(player_id, season)
request = GET(
"http://stats.nba.com/stats/shotchartdetail",
query = list(
PlayerID = player_id,
PlayerPosition = "",
Season = season,
ContextMeasure = "FGA",
DateFrom = "",
DateTo = "",
GameID = "",
GameSegment = "",
LastNGames = 0,
LeagueID = "00",
Location = "",
Month = 0,
OpponentTeamID = 0,
Outcome = "",
Period = 4,
Position = "",
RookieYear = "",
SeasonSegment = "",
SeasonType = "Regular Season",
TeamID = 0,
VsConference = "",
VsDivision = ""
),
add_headers(request_headers)
)
stop_for_status(request)
data = content(request)
raw_shots_data = data$resultSets[[1]]$rowSet
col_names = tolower(as.character(data$resultSets[[1]]$headers))
if (length(raw_shots_data) == 0) {
shots = data.frame(
matrix(nrow = 0, ncol = length(col_names))
)
} else {
shots = data.frame(
matrix(
unlist(raw_shots_data),
ncol = length(col_names),
byrow = TRUE
)
)
}
shots = tbl_df(shots)
names(shots) = col_names
shots = mutate(shots,
loc_x = as.numeric(as.character(loc_x)) / 10,
loc_y = as.numeric(as.character(loc_y)) / 10 + hoop_center_y,
shot_distance = as.numeric(as.character(shot_distance)),
shot_made_numeric = as.numeric(as.character(shot_made_flag)),
shot_made_flag = factor(shot_made_flag, levels = c("1", "0"), labels = c("made", "missed")),
shot_attempted_flag = as.numeric(as.character(shot_attempted_flag)),
shot_value = ifelse(tolower(shot_type) == "3pt field goal", 3, 2)
)
raw_league_avg_data = data$resultSets[[2]]$rowSet
league_avg_names = tolower(as.character(data$resultSets[[2]]$headers))
league_averages = tbl_df(data.frame(
matrix(unlist(raw_league_avg_data), ncol = length(league_avg_names), byrow = TRUE)
))
names(league_averages) = league_avg_names
league_averages = mutate(league_averages,
fga = as.numeric(as.character(fga)),
fgm = as.numeric(as.character(fgm)),
fg_pct = as.numeric(as.character(fg_pct)),
shot_value = ifelse(shot_zone_basic %in% c("Above the Break 3", "Backcourt", "Left Corner 3", "Right Corner 3"), 3, 2)
)
return(list(player = shots, league_averages = league_averages))
}
default_shots = fetch_shots_by_player_id_and_season(default_player$person_id, default_season)
View(default_shots)
fetch_shots_by_player_id_and_season = function(player_id, season) {
req(player_id, season)
request = GET(
"http://stats.nba.com/stats/shotchartdetail",
query = list(
PlayerID = player_id,
PlayerPosition = "",
Season = season,
ContextMeasure = "FGA",
DateFrom = "",
DateTo = "",
GameID = "",
GameSegment = "",
LastNGames = 0,
LeagueID = "00",
Location = "",
Month = 0,
OpponentTeamID = 0,
Outcome = "",
Period = "4",
Position = "",
RookieYear = "",
SeasonSegment = "",
SeasonType = "Regular Season",
TeamID = 0,
VsConference = "",
VsDivision = ""
),
add_headers(request_headers)
)
stop_for_status(request)
data = content(request)
raw_shots_data = data$resultSets[[1]]$rowSet
col_names = tolower(as.character(data$resultSets[[1]]$headers))
if (length(raw_shots_data) == 0) {
shots = data.frame(
matrix(nrow = 0, ncol = length(col_names))
)
} else {
shots = data.frame(
matrix(
unlist(raw_shots_data),
ncol = length(col_names),
byrow = TRUE
)
)
}
shots = tbl_df(shots)
names(shots) = col_names
shots = mutate(shots,
loc_x = as.numeric(as.character(loc_x)) / 10,
loc_y = as.numeric(as.character(loc_y)) / 10 + hoop_center_y,
shot_distance = as.numeric(as.character(shot_distance)),
shot_made_numeric = as.numeric(as.character(shot_made_flag)),
shot_made_flag = factor(shot_made_flag, levels = c("1", "0"), labels = c("made", "missed")),
shot_attempted_flag = as.numeric(as.character(shot_attempted_flag)),
shot_value = ifelse(tolower(shot_type) == "3pt field goal", 3, 2)
)
raw_league_avg_data = data$resultSets[[2]]$rowSet
league_avg_names = tolower(as.character(data$resultSets[[2]]$headers))
league_averages = tbl_df(data.frame(
matrix(unlist(raw_league_avg_data), ncol = length(league_avg_names), byrow = TRUE)
))
names(league_averages) = league_avg_names
league_averages = mutate(league_averages,
fga = as.numeric(as.character(fga)),
fgm = as.numeric(as.character(fgm)),
fg_pct = as.numeric(as.character(fg_pct)),
shot_value = ifelse(shot_zone_basic %in% c("Above the Break 3", "Backcourt", "Left Corner 3", "Right Corner 3"), 3, 2)
)
return(list(player = shots, league_averages = league_averages))
}
default_shots = fetch_shots_by_player_id_and_season(default_player$person_id, default_season)
View(default_shots)
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
View(default_shots)
runApp('Desktop/Visualization/project/ballr-master')
fetch_shots_by_player_id_and_season = function(player_id, season) {
req(player_id, season)
request = GET(
"http://stats.nba.com/stats/shotchartdetail",
query = list(
PlayerID = player_id,
PlayerPosition = "",
Season = season,
ContextMeasure = "FGA",
DateFrom = "",
DateTo = "",
GameID = "",
GameSegment = "",
LastNGames = 0,
LeagueID = "00",
Location = "",
Month = 0,
OpponentTeamID = 0,
Outcome = "",
Period = 4,
Position = "",
RookieYear = "",
SeasonSegment = "",
SeasonType = "Regular Season",
TeamID = 0,
VsConference = "",
VsDivision = ""
),
add_headers(request_headers)
)
stop_for_status(request)
data = content(request)
raw_shots_data = data$resultSets[[1]]$rowSet
col_names = tolower(as.character(data$resultSets[[1]]$headers))
if (length(raw_shots_data) == 0) {
shots = data.frame(
matrix(nrow = 0, ncol = length(col_names))
)
} else {
shots = data.frame(
matrix(
unlist(raw_shots_data),
ncol = length(col_names),
byrow = TRUE
)
)
}
shots = tbl_df(shots)
names(shots) = col_names
shots = mutate(shots,
loc_x = as.numeric(as.character(loc_x)) / 10,
loc_y = as.numeric(as.character(loc_y)) / 10 + hoop_center_y,
shot_distance = as.numeric(as.character(shot_distance)),
shot_made_numeric = as.numeric(as.character(shot_made_flag)),
shot_made_flag = factor(shot_made_flag, levels = c("1", "0"), labels = c("made", "missed")),
shot_attempted_flag = as.numeric(as.character(shot_attempted_flag)),
shot_value = ifelse(tolower(shot_type) == "3pt field goal", 3, 2)
)
raw_league_avg_data = data$resultSets[[2]]$rowSet
league_avg_names = tolower(as.character(data$resultSets[[2]]$headers))
league_averages = tbl_df(data.frame(
matrix(unlist(raw_league_avg_data), ncol = length(league_avg_names), byrow = TRUE)
))
names(league_averages) = league_avg_names
league_averages = mutate(league_averages,
fga = as.numeric(as.character(fga)),
fgm = as.numeric(as.character(fgm)),
fg_pct = as.numeric(as.character(fg_pct)),
shot_value = ifelse(shot_zone_basic %in% c("Above the Break 3", "Backcourt", "Left Corner 3", "Right Corner 3"), 3, 2)
)
return(list(player = shots, league_averages = league_averages))
}
default_shots = fetch_shots_by_player_id_and_season(default_player$person_id, default_season)
View(default_shots)
default_shots[["player"]][["minutes_remaining"]]
levels(default_shots[["player"]][["minutes_remaining"]])
levels(default_shots[["player"]][["minutes_remaining"]])=c(0:10)
levels(default_shots[["player"]][["minutes_remaining"]])
default_shots$player$minutes_remaining<=5
default_shots$player$minutes_remaining<="5"
selected = c(0:5)
default_shots$player$minutes_remaining %in% selected
default_shots$player[default_shots$player$minutes_remaining %in% selected]
default_shots$player[default_shots$player$minutes_remaining %in% selected,]
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
View(default_shots)
default_shots[["player"]][["minutes_remaining"]]
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
fetch_shots_by_player_id_and_season = function(player_id, season, minutes=5) {
req(player_id, season)
request = GET(
"http://stats.nba.com/stats/shotchartdetail",
query = list(
PlayerID = player_id,
PlayerPosition = "",
Season = season,
ContextMeasure = "FGA",
DateFrom = "",
DateTo = "",
GameID = "",
GameSegment = "",
LastNGames = 0,
LeagueID = "00",
Location = "",
Month = 0,
OpponentTeamID = 0,
Outcome = "",
Period = 4,
Position = "",
RookieYear = "",
SeasonSegment = "",
SeasonType = "Regular Season",
TeamID = 0,
VsConference = "",
VsDivision = ""
),
add_headers(request_headers)
)
stop_for_status(request)
data = content(request)
raw_shots_data = data$resultSets[[1]]$rowSet
col_names = tolower(as.character(data$resultSets[[1]]$headers))
if (length(raw_shots_data) == 0) {
shots = data.frame(
matrix(nrow = 0, ncol = length(col_names))
)
} else {
shots = data.frame(
matrix(
unlist(raw_shots_data),
ncol = length(col_names),
byrow = TRUE
)
)
}
shots = tbl_df(shots)
names(shots) = col_names
shots = mutate(shots,
loc_x = as.numeric(as.character(loc_x)) / 10,
loc_y = as.numeric(as.character(loc_y)) / 10 + hoop_center_y,
shot_distance = as.numeric(as.character(shot_distance)),
shot_made_numeric = as.numeric(as.character(shot_made_flag)),
shot_made_flag = factor(shot_made_flag, levels = c("1", "0"), labels = c("made", "missed")),
shot_attempted_flag = as.numeric(as.character(shot_attempted_flag)),
shot_value = ifelse(tolower(shot_type) == "3pt field goal", 3, 2)
)
raw_league_avg_data = data$resultSets[[2]]$rowSet
league_avg_names = tolower(as.character(data$resultSets[[2]]$headers))
league_averages = tbl_df(data.frame(
matrix(unlist(raw_league_avg_data), ncol = length(league_avg_names), byrow = TRUE)
))
names(league_averages) = league_avg_names
league_averages = mutate(league_averages,
fga = as.numeric(as.character(fga)),
fgm = as.numeric(as.character(fgm)),
fg_pct = as.numeric(as.character(fg_pct)),
shot_value = ifelse(shot_zone_basic %in% c("Above the Break 3", "Backcourt", "Left Corner 3", "Right Corner 3"), 3, 2)
)
#only keep last 5 minutes
levels(shots[["minutes_remaining"]])=c(0:10)
selected = c(0:minutes)
shots=shots[shots$minutes_remaining %in% selected,]
return(list(player = shots, league_averages = league_averages))
}
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/ballr-master')
runApp('Desktop/Visualization/project/twitter/wordcloud')
setRepositories(ind=1:2)
install.packages("ggimage")
library(ggimage)
clutch = read.csv('/Users/nihaozheng/Desktop/Visualization/project/clutch_team/fetched.csv')
library(png)
library(ggplot2)
install.packages("png")
library(png)
library(ggplot2)
setwd("/Users/nihaozheng/Desktop/Visualization/project/clutch_team/logo")
img <- readPNG("ATL.png")
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = img, size = .1)
df1 = clutch[,c('OFF_RATING','DEF_RATING','team')]
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = img, size = .1)
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = img, size = 1)
img <- system.file("img", "Rlogo.png", package = "png")
df1 = clutch[,c('OFF_RATING','DEF_RATING','team')]
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = img, size = 1)
img <- system.file("img", "Rlogo.png", package = "png")
df1 = clutch[,c('OFF_RATING','DEF_RATING','team')]
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = img, size = .1)
img <- readPNG("ATL.png")
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = img, size = .01)
img <- system.file("img", "Rlogo.png", package = "png")
img
img <- "https://goo.gl/images/v5eaVr"
df1 = clutch[,c('OFF_RATING','DEF_RATING','team')]
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = img, size = .01)
img <- "https://github.com/NiHaozheng/NBA-Visualization/blob/master/clutch_team/logo/ATL.png"
df1 = clutch[,c('OFF_RATING','DEF_RATING','team')]
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = img, size = .01)
img <- readPNG("ATL.png")
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = img, size = .01)
img = 'https://goo.gl/images/NL5Duv'
df1 = clutch[,c('OFF_RATING','DEF_RATING','team')]
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = img, size = .01)
img = 'https://espntheundefeated.files.wordpress.com/2017/05/nba-logo.png'
df1 = clutch[,c('OFF_RATING','DEF_RATING','team')]
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = img, size = .01)
img <- "https://github.com/NiHaozheng/NBA-Visualization/blob/master/clutch_team/logo/ATL.png?raw=true"
df1 = clutch[,c('OFF_RATING','DEF_RATING','team')]
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = img, size = .01)
?geom_image
path = 'https://github.com/NiHaozheng/NBA-Visualization/blob/master/clutch_team/logo/'
path+"ss"
paste(path,'rr')
paste(path,'rr',sep='')
df1
paste(path,df1$)
paste(path,df1$team)
paste(path,df1$team,'.png')
paste(path,df1$team,'.png?raw=true,sep=')
paste(path,df1$team,'.png?raw=true,sep='')
''
paste(path,df1$team,'.png?raw=true',sep='')
path = 'https://github.com/NiHaozheng/NBA-Visualization/blob/master/clutch_team/logo/'
#img <- "https://github.com/NiHaozheng/NBA-Visualization/blob/master/clutch_team/logo/ATL.png?raw=true"
df1 = clutch[,c('OFF_RATING','DEF_RATING','team')]
df1$img = paste(path,df1$team,'.png?raw=true',sep='')
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = df1$img, size = .1)
paste(path,df1$team,'.png?raw=true',sep='')
path = 'https://github.com/NiHaozheng/NBA-Visualization/blob/master/clutch_team/logo/'
#img <- "https://github.com/NiHaozheng/NBA-Visualization/blob/master/clutch_team/logo/ATL.png?raw=true"
df1 = clutch[,c('OFF_RATING','DEF_RATING','team')]
df1$img = paste(path,df1$team,'.png?raw=true',sep='')
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = df1$img, size = .1)
path = 'https://github.com/NiHaozheng/NBA-Visualization/blob/master/clutch_team/logo/'
#img <- "https://github.com/NiHaozheng/NBA-Visualization/blob/master/clutch_team/logo/ATL.png?raw=true"
df1 = clutch[,c('OFF_RATING','DEF_RATING','team')]
df1$img = paste(path,df1$team,'.png?raw=true',sep='')
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = df1$img, size = .05)
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = df1$img, size = .05)+theme_scientific()
library('artyfarty')
devtools::install_github('bart6114/artyfarty')
install.packages('devtools')
devtools::install_github('bart6114/artyfarty')
library('artyfarty')
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = df1$img, size = .05)+
theme_scientific()+
xlab('offensive rating')+ylab('defensive rating')
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = df1$img, size = .05)+
theme_scientific()+
xlab('offensive rating')+ylab('defensive rating')
ggplot(df1,aes(x=OFF_RATING,y=DEF_RATING))+geom_point()+
scale_y_reverse()+geom_image(image = df1$img, size = .08)+
theme_scientific()+
xlab('offensive rating')+ylab('defensive rating')
